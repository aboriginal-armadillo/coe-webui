rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for user-specific data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      match /chats/{chatId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

			match /workflows/{workflowId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;

        match /runs/{runId} {
        	allow read, write: if request.auth != null && request.auth.uid == userId;

          match /nodes/{nodeId} {
            allow read, write: if request.auth != null && request.auth.uid == userId;
          }
        }

        match /bots/* {
        	allow read, write: if request.auth != null && request.auth.uid == userId;
        }
      }

			match /library/{docID} {
       allow read, write: if request.auth != null && request.auth.uid == userId;
    	}

      match /pineconeIndexes/{indexName} {
        allow read, write: if request.auth != null && request.auth.uid == userId;

        match /documents/{documentId} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
        }
      }
    }

    // Rules for config data
    match /config/{document=**} {
      allow read: if request.auth != null;
    }

    // Rules for public data
    match /public/{chatId} {
      // Allow read access to anyone with rate limiting (implementation example in client-side)
      allow read: if true;

      // Allow write access only to authenticated users
      allow write: if request.auth != null;
    }

    match /publicLibrary/{document=**} {
      allow read,write: if request.auth != null;
    }

    // Default rule: deny access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
